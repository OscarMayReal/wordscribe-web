import type { Metadata } from "next";
import { Geist, Geist_Mono, Figtree } from "next/font/google";
import "./globals.css";
import { ClerkProvider } from "@clerk/nextjs";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const figtree = Figtree({
  variable: "--font-figtree",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "WordScribe",
  description: "Generated by create next app",
};

const localizations = {
  "taskChooseOrganization": {
    "createOrganization": {
      "subtitle": "Tell us a bit about your blog",
      "formButtonSubmit": "Create new blog"
    },
    "chooseOrganization": {
      "title": "Choose a blog",
      "subtitle": "Join an existing blog or create a new one",
      "action__createOrganization": "Create new blog"
    }
  },
  "createOrganization": {
    "formButtonSubmit": "Create blog",
    "title": "Create blog"
  },
  "formFieldInputPlaceholder__organizationName": "Blog name",
  "formFieldInputPlaceholder__organizationSlug": "my-blog",
  "organizationList": {
    "action__createOrganization": "Create blog",
    "createOrganization": "Create Blog",
    "titleWithoutPersonal": "Choose a blog"
  },
  "organizationProfile": {
    "createDomainPage": {
      "subtitle": "Add the domain to verify. Users with email addresses at this domain can join the blog automatically or request to join."
    },
    "membersPage": {
      "invitationsTab": {
        "autoInvitations": {
          "headerSubtitle": "Invite users by connecting an email domain with your blog. Anyone who signs up with a matching email domain will be able to join the blog anytime."
        }
      },
      "requestsTab": {
        "autoSuggestions": {
          "headerSubtitle": "Users who sign up with a matching email domain will be able to see a suggestion to request to join your blog."
        }
      }
    },
    "navbar": {
      "description": "Manage your blog.",
      "title": "Blog"
    },
    "plansPage": {
      "alerts": {
        "noPermissionsToManageBilling": "You do not have permissions to manage billing for this blog."
      }
    },
    "profilePage": {
      "dangerSection": {
        "deleteOrganization": {
          "messageLine1": "Are you sure you want to delete this blog?",
          "successMessage": "You have deleted the blog.",
          "title": "Delete blog"
        },
        "leaveOrganization": {
          "messageLine1": "Are you sure you want to leave this blog? You will lose access to this blog and its applications.",
          "successMessage": "You have left the blog.",
          "title": "Leave blog"
        }
      },
      "domainSection": {
        "subtitle": "Allow users to join the blog automatically or request to join based on a verified email domain."
      },
      "successMessage": "The blog has been updated."
    },
    "removeDomainPage": {
      "messageLine2": "Users wonâ€™t be able to join the blog automatically after this."
    },
    "start": {
      "profileSection": {
        "title": "Blog Profile"
      }
    }
  },
  "organizationSwitcher": {
    "action__createOrganization": "Create blog",
    "notSelected": "No blog selected"
  }
}


export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ClerkProvider localization={localizations}>
      <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} ${figtree.variable} antialiased`}
          style={{ maxHeight: "100dvh" }}
        >
          {children}
        </body>
      </html>
    </ClerkProvider>
  );
}
